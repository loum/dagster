{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dagster workflow management primer.","text":"<p>Dagster will prime a development environment that enables you to integrate directly into the Apache Airflow workflow management system with minimal fuss.</p>"},{"location":"getting-started/","title":"Getting started","text":"<p>Dagster can be used as a primer for your workflow management system.</p>"},{"location":"getting-started/#running-the-local-airflow-webserver-ui","title":"Running the Local Airflow Webserver UI","text":"<p>Launch the Airflow webserver UI in SequentialExector mode to visualise and interact with dashboard (<code>Ctrl-C</code> to stop): <pre><code>make local-airflow-start\n</code></pre> You can access your local Airflow webserver console via http://localhost:8888.</p>"},{"location":"getting-started/#creating-a-workflow-the-dag-file","title":"Creating a workflow: the DAG file","text":"<p>Airflow DAGs are written in Python and are technically just a Python module (with <code>.py</code> extension). DAGs are interpreted by Airflow via the DagBag facility and can then be scheduled to execute.</p> <p>DAGs files are placed under the <code>AIRFLOW__CORE__DAGS_FOLDER</code>. The directory location can be identified as follows: <pre><code>make print-AIRFLOW__CORE__DAGS_FOLDER\n</code></pre></p>"},{"location":"getting-started/#creating-a-dag-from-the-default-template","title":"Creating a DAG from the default template","text":"<p>The default DAG template can help you get started creating your new DAG. The template DAG at <code>src/dagster/dags/template.py</code> features a set of <code>start</code> and <code>end</code> \"book-end\" tasks that can be used to delimit your pipeline. You then add your own business related tasks in between.</p> <p>The <code>start</code> and <code>end</code> tasks are instantiated via Airflow's EmptyOperators and act as safe landing zones for your pipeline.</p> <p>Note</p> <p>More information around Airflow DAG creation and concepts is available at the Airflow tutorial.</p> <p>Copy <code>src/dagster/dags/template.py</code>  into a new Python file replacing <code>DAG_NAME</code> with something meaningful that best represents your new workflow: <pre><code>cp src/dagster/dags/template.py src/dagster/dags/&lt;DAG_NAME&gt;.py\n</code></pre> Provide a more detailed description about your new DAG by editing <code>src/dagster/dags/&lt;DAG_NAME&gt;.py</code> and replacing the <code>DESCRIPTION</code> variable value to suit. <code>DESCRIPTION</code> renders in the Airflow UI and helps visitors understand the intent behind your workflow.</p> <p>A quick validation of your new DAG can be performed with: <pre><code>make local-list-dags\n</code></pre></p>"},{"location":"getting-started/#default-dag-template-code-snippet","title":"Default DAG template code snippet","text":"<pre><code>\"\"\"The simplest DAG template.\n\n\"\"\"\nimport os\nimport airflow\n\nimport dagster.common.task\nfrom dagster.primer import Primer\n\nDAG_NAME = os.path.basename(os.path.splitext(__file__)[0]).replace(\"_\", \"-\")\nDESCRIPTION = \"Simple book-end DAG template to get you started\"\n\nPRIMER = Primer(dag_name=DAG_NAME, department=\"ADMIN\")\nPRIMER.dag_properties.update({\"description\": DESCRIPTION})\n\nDAG = airflow.DAG(\n    PRIMER.dag_id, default_args=PRIMER.default_args, **(PRIMER.dag_properties)\n)\n\nTASK_START = dagster.common.task.start(DAG, PRIMER.default_args)\n#\n# Add your content here.\n#\nTASK_END = dagster.common.task.end(DAG, PRIMER.default_args)\n\nTASK_START &gt;&gt; TASK_END  # pylint: disable=pointless-statement\n</code></pre>"},{"location":"getting-started/#things-to-consider-when-creating-your-dags","title":"Things to consider when creating your DAGs","text":"<p>Airflow as a workflow management tool can be utilised as shared infrastructure between different teams and entities within the organisation. Having more contributors to the platform introduces a communal aspect where everyone can create and leverage existing code and tooling. However, as the number of DAGs begins to increase the platform could also increase in complexity. The following guidelines should be considered when creating your DAGs.</p>"},{"location":"getting-started/#naming-standards","title":"Naming standards","text":"<p>The DAG name (<code>DAG_NAME</code>) plays an integral part in the operation of Airflow. It is also the token that presents in the Airflow web UI.</p> <p>The DAG names are made up of three components separated by underscores (<code>_</code>):</p> <ol> <li>Department or team name (<code>department</code> parameter to <code>dagster.Primer</code>)</li> <li>Short name to give DAG some operational context (<code>dag_name</code> parameter to <code>dagster.Primer</code>)</li> <li>Environment is added automatically based on the setting of the environment variable <code>AIRFLOW_CUSTOM_ENV</code> (defaults to <code>local</code>)</li> </ol> <p>For example, the DAG name generated from the <code>src/dagster/dags/template.py</code> becomes <code>ADMIN-TEMPLATE_LOCAL</code></p> <p>Note</p> <p>Ensure the <code>dag_name</code> and <code>department</code> combination is unique amongst all DAGS under <code>AIRFLOW__CORE__DAGS_FOLDER</code> as this could cause an implicit conflict that is difficult to troubleshoot.</p>"},{"location":"reference/dagster/connection/","title":"connection.py","text":"<p>Airflow connection helpers.</p>"},{"location":"reference/dagster/connection/#dagster.connection.delete_connection","title":"<code>delete_connection(key)</code>","text":"<p>Delete connection <code>key</code> from DB.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Text</code> <p>The name of the Airflow Variable key.</p> required Source code in <code>dagster/connection.py</code> <pre><code>def delete_connection(key: Text) -&gt; None:\n\"\"\"Delete connection `key` from DB.\n    Parameters:\n        key: The name of the Airflow Variable key.\n    \"\"\"\nlogging.info('Attempting to delete Airflow connection with conn_id: \"%s\"', key)\nwith LAZY_AF_UTILS.session.create_session() as session:\ntry:\nto_delete = (\nsession.query(LAZY_AF_MODELS.Connection)\n.filter(LAZY_AF_MODELS.Connection.conn_id == key)\n.one()\n)\nexcept exc.NoResultFound:\nlogging.warning('Did not find a connection with conn_id: \"%s\"', key)\nexcept exc.MultipleResultsFound:\nlogging.warning('Found more than one connection with conn_id: \"%s\"', key)\nelse:\nsession.delete(to_delete)\nlogging.info(\n'Successfully deleted Airflow connection with conn_id: \"%s\"', key\n)\n</code></pre>"},{"location":"reference/dagster/connection/#dagster.connection.list_connections","title":"<code>list_connections()</code>","text":"<p>Return connection information from Airflow connections table.</p> <p>Returns:</p> Type Description <code>List[Text]</code> <p>List of all available connections.</p> Source code in <code>dagster/connection.py</code> <pre><code>def list_connections() -&gt; List[Text]:\n\"\"\"Return connection information from Airflow connections table.\n    Returns:\n        List of all available connections.\n    \"\"\"\nwith LAZY_AF_UTILS.session.create_session() as session:\nquery = session.query(LAZY_AF_MODELS.Connection)\nconns = query.all()\nLAZY_AF_CLI_SIMPLE_TABLE.AirflowConsole().print_as(\ndata=conns,\noutput=\"table\",\nmapper=LAZY_AF_CONNECTION_COMMAND._connection_mapper,  # pylint: disable=protected-access\n)\nreturn [x.conn_id for x in conns]\n</code></pre>"},{"location":"reference/dagster/connection/#dagster.connection.set_connection","title":"<code>set_connection(path_to_connections)</code>","text":"<p>Add configuration items to Airflow <code>airflow.models.Connection</code>.</p> <p>Parameters:</p> Name Type Description Default <code>path_to_connections</code> <code>Text</code> <p>File path the the Airflow connections configuration.</p> required Source code in <code>dagster/connection.py</code> <pre><code>def set_connection(path_to_connections: Text) -&gt; None:\n\"\"\"Add configuration items to Airflow `airflow.models.Connection`.\n    Parameters:\n        path_to_connections: File path the the Airflow connections configuration.\n    \"\"\"\nraw_connections = filester.get_directory_files(\npath_to_connections, file_filter=\"*.json\"\n)\nlogging.info('Checking \"%s\" for Airflow connections ...', path_to_connections)\nfor raw_connection in raw_connections:\nlogging.info('Found Airflow connection \"%s\"', raw_connection)\nwith open(\nraw_connection,\nencoding=\"utf-8\",\n) as json_file:\ndata = json.load(json_file)\nconn_extra = data.pop(\"conn_extra\", None)\nnew_conn = LAZY_AF_MODELS.Connection(**data)\nif conn_extra:\nnew_conn.set_extra(json.dumps(conn_extra))\nwith LAZY_AF_UTILS.session.create_session() as session:\nstate = \"OK\"\nif (\nsession.query(LAZY_AF_MODELS.Connection)\n.filter(LAZY_AF_MODELS.Connection.conn_id == new_conn.conn_id)\n.first()\n):\nstate = \"already exists\"\nelse:\nsession.add(new_conn)\nmsg = f'Airflow connection \"{data.get(\"conn_id\")}\" create status'\nlogging.info(\"%s: %s\", msg, state)\n</code></pre>"},{"location":"reference/dagster/connection/#dagster.connection.set_logging_connection","title":"<code>set_logging_connection(path_to_connections=None)</code>","text":"<p>Logging configuration to Airflow <code>airflow.models.Connection</code>.</p> <p>Parameters:</p> Name Type Description Default <code>path_to_connections</code> <code>Optional[Text]</code> <p>Optional file path the the Airflow connections configuration.</p> <code>None</code> Source code in <code>dagster/connection.py</code> <pre><code>def set_logging_connection(path_to_connections: Optional[Text] = None) -&gt; None:\n\"\"\"Logging configuration to Airflow `airflow.models.Connection`.\n    Parameters:\n        path_to_connections: Optional file path the the Airflow connections configuration.\n    \"\"\"\nif REMOTE_LOGGING:\nif not path_to_connections:\npath_to_connections = os.path.join(\npathlib.Path(__file__).resolve().parents[0],\n\"config\",\n\"templates\",\n\"connections\",\n\"logging\",\n\"sas\",\n)\nset_templated_connection(path_to_connections)\nelse:\nlogging.info(\n'Remote logging not enabled.  Check \"AIRFLOW__LOGGING__REMOTE_LOGGING\"'\n)\n</code></pre>"},{"location":"reference/dagster/connection/#dagster.connection.set_templated_connection","title":"<code>set_templated_connection(path_to_connections)</code>","text":"<p>Add configuration items to Airflow <code>airflow.models.Connection</code>.</p> <p>Connection templates are sourced from the <code>path_to_connections</code> directory and should feature a <code>*.j2</code> extension.  Each template file should feature a single <code>airflow.models.Connection</code> definition in JSON format.  For example::</p> <pre><code>{\n    \"conn_id\": \"azure_wasb_logs\",\n    \"conn_type\": \"wasb\",\n    \"login\": \"login\",\n    \"password\": \"secret\"\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>path_to_connections</code> <code>Text</code> <p>File path the the Airflow connections configuration.</p> required Source code in <code>dagster/connection.py</code> <pre><code>def set_templated_connection(path_to_connections: Text) -&gt; None:\n\"\"\"Add configuration items to Airflow `airflow.models.Connection`.\n    Connection templates are sourced from the `path_to_connections` directory and should feature\n    a `*.j2` extension.  Each template file should feature a single\n    `airflow.models.Connection` definition in JSON format.  For example::\n        {\n            \"conn_id\": \"azure_wasb_logs\",\n            \"conn_type\": \"wasb\",\n            \"login\": \"login\",\n            \"password\": \"secret\"\n        }\n    Parameters:\n        path_to_connections: File path the the Airflow connections configuration.\n    \"\"\"\nfor path_to_variable_template in filester.get_directory_files(\npath_to_connections, file_filter=\"*.j2\"\n):\nrendered_content = build_from_template({}, path_to_variable_template, False)\ndata = json.loads(rendered_content)\nconn_extra = data.pop(\"conn_extra\", None)\nnew_conn = LAZY_AF_MODELS.Connection(**data)\nif conn_extra:\nnew_conn.set_extra(json.dumps(conn_extra))\nwith LAZY_AF_UTILS.session.create_session() as session:\nstate = \"OK\"\nif (\nsession.query(LAZY_AF_MODELS.Connection)\n.filter(LAZY_AF_MODELS.Connection.conn_id == new_conn.conn_id)\n.first()\n):\nstate = \"already exists\"\nelse:\nsession.add(new_conn)\nmsg = f'Airflow connection \"{data.get(\"conn_id\")}\" create status'\nlogging.info(\"%s: %s\", msg, state)\n</code></pre>"},{"location":"reference/dagster/primer/","title":"primer.py","text":"<p>Primer provides consistent context for your program's workflows.</p> <ul> <li><code>dag_name</code> and <code>department</code> form the <code>dag_id</code> that presents in the Airflow dashboard.</li> <li><code>department</code> organisation/department/team delimiter to categorise DAG ID.</li> <li><code>airflow_env_variable</code> is the name used in the Airflow infrustructure   environment that determines the instance context. For example,   <code>local</code>, <code>development</code> and <code>production</code>. Environment naming rules are not enforced.</li> </ul> <p><code>kwargs</code> accepts parameters that are passed into <code>airflow.models.dag.DAG</code>.</p>"},{"location":"reference/dagster/primer/#dagster.primer.Primer","title":"<code>Primer</code>","text":"<p>Common components that can get your DAGs running with minimal fuss.</p> Source code in <code>dagster/primer.py</code> <pre><code>class Primer:\n\"\"\"Common components that can get your DAGs running with minimal fuss.\"\"\"\ndef __init__(\nself,\ndag_name: Text,\ndepartment: Text = \"dept\",\nairflow_env_variable: Text = \"AIRFLOW_CUSTOM_ENV\",\n):\nself.__dag_name = dag_name\nself.__department = department\nself.__airflow_env_variable = airflow_env_variable\nself.__default_args = {\n\"owner\": \"airflow\",\n\"depends_on_past\": False,\n\"email_on_failure\": False,\n\"email_on_retry\": False,\n\"retries\": 2,\n\"retry_delay\": datetime.timedelta(minutes=5),\n}\nself.__dag_properties = {\n\"schedule_interval\": None,\n\"start_date\": Primer.derive_start_date(),\n\"catchup\": False,\n}\n@property\ndef dag_name(self) -&gt; Text:\n\"\"\"`dag_name` getter.\"\"\"\nreturn self.__dag_name\n@property\ndef department(self) -&gt; Text:\n\"\"\"`department` getter.\"\"\"\nreturn self.__department\n@property\ndef airflow_env_variable(self) -&gt; Text:\n\"\"\"`airflow_env_variable` getter.\"\"\"\nreturn self.__airflow_env_variable\n@property\ndef dag_id(self) -&gt; Text:\n\"\"\"`dag_id` getter.\"\"\"\nreturn f\"{self.department}_{self.dag_name}_{self.get_env}\".upper()\n@property\ndef default_args(self) -&gt; Dict[Text, Any]:\n\"\"\"The DAG's Operator-specific default arguments.\"\"\"\nreturn self.__default_args\n@property\ndef dag_properties(self) -&gt; Dict[Any, Any]:\n\"\"\"Provide sane DAG parameter defaults.\"\"\"\nreturn self.__dag_properties\n@property\ndef get_env(self) -&gt; Text:\n\"\"\"Return current environement name.\"\"\"\nreturn os.environ.get(self.airflow_env_variable, \"local\").upper()\n@staticmethod\ndef derive_start_date(timezone: Text = \"Australia/Melbourne\") -&gt; datetime.datetime:\n\"\"\"Define the DAG start date.\n        Supported date formats are `%Y-%m-%d`.\n        If no date is identified in the `CONFIG` then date defaults\n        to the first day of the current year.\n        Parameters:\n            timezone: Timezone context.\n        Returns:\n            `datetime` object representing the DAG start date.\n        \"\"\"\ndef current_year() -&gt; int:\nreturn datetime.datetime.now().year\nlocal_tz = pendulum.timezone(timezone)  # type: ignore\n_dt = datetime.datetime(current_year(), 1, 1, tzinfo=local_tz)\nreturn _dt\n</code></pre>"},{"location":"reference/dagster/primer/#dagster.primer.Primer.airflow_env_variable","title":"<code>airflow_env_variable: Text</code>  <code>property</code>","text":"<p><code>airflow_env_variable</code> getter.</p>"},{"location":"reference/dagster/primer/#dagster.primer.Primer.dag_id","title":"<code>dag_id: Text</code>  <code>property</code>","text":"<p><code>dag_id</code> getter.</p>"},{"location":"reference/dagster/primer/#dagster.primer.Primer.dag_name","title":"<code>dag_name: Text</code>  <code>property</code>","text":"<p><code>dag_name</code> getter.</p>"},{"location":"reference/dagster/primer/#dagster.primer.Primer.dag_properties","title":"<code>dag_properties: Dict[Any, Any]</code>  <code>property</code>","text":"<p>Provide sane DAG parameter defaults.</p>"},{"location":"reference/dagster/primer/#dagster.primer.Primer.default_args","title":"<code>default_args: Dict[Text, Any]</code>  <code>property</code>","text":"<p>The DAG's Operator-specific default arguments.</p>"},{"location":"reference/dagster/primer/#dagster.primer.Primer.department","title":"<code>department: Text</code>  <code>property</code>","text":"<p><code>department</code> getter.</p>"},{"location":"reference/dagster/primer/#dagster.primer.Primer.get_env","title":"<code>get_env: Text</code>  <code>property</code>","text":"<p>Return current environement name.</p>"},{"location":"reference/dagster/primer/#dagster.primer.Primer.derive_start_date","title":"<code>derive_start_date(timezone='Australia/Melbourne')</code>  <code>staticmethod</code>","text":"<p>Define the DAG start date.</p> <p>Supported date formats are <code>%Y-%m-%d</code>.</p> <p>If no date is identified in the <code>CONFIG</code> then date defaults to the first day of the current year.</p> <p>Parameters:</p> Name Type Description Default <code>timezone</code> <code>Text</code> <p>Timezone context.</p> <code>'Australia/Melbourne'</code> <p>Returns:</p> Type Description <code>datetime.datetime</code> <p><code>datetime</code> object representing the DAG start date.</p> Source code in <code>dagster/primer.py</code> <pre><code>@staticmethod\ndef derive_start_date(timezone: Text = \"Australia/Melbourne\") -&gt; datetime.datetime:\n\"\"\"Define the DAG start date.\n    Supported date formats are `%Y-%m-%d`.\n    If no date is identified in the `CONFIG` then date defaults\n    to the first day of the current year.\n    Parameters:\n        timezone: Timezone context.\n    Returns:\n        `datetime` object representing the DAG start date.\n    \"\"\"\ndef current_year() -&gt; int:\nreturn datetime.datetime.now().year\nlocal_tz = pendulum.timezone(timezone)  # type: ignore\n_dt = datetime.datetime(current_year(), 1, 1, tzinfo=local_tz)\nreturn _dt\n</code></pre>"},{"location":"reference/dagster/templater/","title":"templater.py","text":"<p>Templating capability.</p>"},{"location":"reference/dagster/templater/#dagster.templater.build_from_template","title":"<code>build_from_template(env_map, template_file_path, write_output=False)</code>","text":"<p>Take <code>template_file_path</code> and template against variables defined by <code>env_map</code>.</p> <p><code>template_file_path</code> needs to end with a <code>.j2</code> extension as the generated content will be output to the <code>template_file_path</code> less the <code>.j2</code>.</p> <p>A special custom filter <code>env_override</code> is available to bypass <code>env_map</code> and source the environment for variable substitution. Use the custom filter <code>env_override</code> in your template as follows: <pre><code>\"test\" : {{ \"default\" | env_override('CUSTOM') }}\n</code></pre></p> <p>Provided an environment variable as been set: <pre><code>export CUSTOM=some_value\n</code></pre></p> <p>The template will render: <pre><code>some_value\n</code></pre></p> <p>Otherwise: <pre><code>default\n</code></pre></p> Source code in <code>dagster/templater.py</code> <pre><code>def build_from_template(\nenv_map: Dict, template_file_path: Text, write_output: bool = False\n) -&gt; Text:\n\"\"\"Take `template_file_path` and template against variables defined by `env_map`.\n    `template_file_path` needs to end with a `.j2` extension as the generated\n    content will be output to the `template_file_path` less the `.j2`.\n    A special custom filter `env_override` is available to bypass `env_map` and\n    source the environment for variable substitution. Use the custom filter\n    `env_override` in your template as follows:\n    ```\n    \"test\" : {{ \"default\" | env_override('CUSTOM') }}\n    ```\n    Provided an environment variable as been set:\n    ```\n    export CUSTOM=some_value\n    ```\n    The template will render:\n    ```\n    some_value\n    ```\n    Otherwise:\n    ```\n    default\n    ```\n    \"\"\"\ndef env_override(value: Text, key: Text) -&gt; Text:\nreturn os.getenv(key, value)\ntarget_template_file_path = os.path.splitext(template_file_path)\noutput = \"\"\ntry:\nfile_loader = jinja2.FileSystemLoader(os.path.dirname(template_file_path))\nj2_env = jinja2.Environment(autoescape=True, loader=file_loader)\nj2_env.filters[\"env_override\"] = env_override\ntemplate = j2_env.get_template(os.path.basename(template_file_path))\noutput = template.render(**env_map)\nif write_output:\nwith tempfile.NamedTemporaryFile() as out_fh:\nout_fh.write(output.encode())\nout_fh.flush()\nshutil.copy(out_fh.name, target_template_file_path[0])\nlogging.info(\n'Templated file \"%s\" generated', target_template_file_path[0]\n)\nexcept jinja2.exceptions.TemplateNotFound as err:\nlogging.error('Skipping templating: TemplateNotFound \"%s\"', err)\nreturn output\n</code></pre>"},{"location":"reference/dagster/variable/","title":"variable.py","text":"<p>Airflow Variable helpers.</p>"},{"location":"reference/dagster/variable/#dagster.variable.del_variable_key","title":"<code>del_variable_key(key)</code>","text":"<p>Airflow Variable delete helper.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Text</code> <p>The name of the Airflow Variable key.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the Airflow Variable key was successfully deleted. Otherwise <code>False</code>.</p> Source code in <code>dagster/variable.py</code> <pre><code>def del_variable_key(key: Text) -&gt; bool:\n\"\"\"Airflow Variable delete helper.\n    Parameters:\n        key: The name of the Airflow Variable key.\n    Returns:\n        `True` if the Airflow Variable key was successfully deleted. Otherwise `False`.\n    \"\"\"\nstatus = False\nlogging.info('Deleting variable \"%s\"', key)\nstatus = LAZY_AF_MODELS.Variable.delete(key)\nif not status:\nlogging.warning('Variable \"%s\" delete failed', key)\nreturn status == 1 or False\n</code></pre>"},{"location":"reference/dagster/variable/#dagster.variable.del_variables","title":"<code>del_variables(path_to_variables)</code>","text":"<p>Delete variable items from Airflow <code>airflow.models.Variable</code>.</p> <p>Parameters:</p> Name Type Description Default <code>path_to_variables</code> <code>Text</code> <p>File path the the Airflow variable configuration.</p> required Source code in <code>dagster/variable.py</code> <pre><code>def del_variables(path_to_variables: Text) -&gt; None:\n\"\"\"Delete variable items from Airflow `airflow.models.Variable`.\n    Parameters:\n        path_to_variables: File path the the Airflow variable configuration.\n    \"\"\"\nenv_map: Dict = ENV_FILE.get(RUN_CONTEXT, {})\nfor path_to_variable_template in filester.get_directory_files(\npath_to_variables, file_filter=\"*.j2\"\n):\nrendered_content = build_from_template(\nenv_map, path_to_variable_template, write_output=False\n)\ndata = json.loads(rendered_content)\nfor var_name in data.keys():\ndel_variable_key(var_name)\n</code></pre>"},{"location":"reference/dagster/variable/#dagster.variable.get_variable","title":"<code>get_variable(name)</code>","text":"<p>Display variable by a given <code>name</code>.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Text</code> <p>Airflow Variable identifier.</p> required <p>Returns:</p> Type Description <code>Dict[Text, Any]</code> <p>the JSON value as a Python <code>dict</code> else None.</p> Source code in <code>dagster/variable.py</code> <pre><code>def get_variable(name: Text) -&gt; Dict[Text, Any]:\n\"\"\"Display variable by a given `name`.\n    Parameters:\n        name: Airflow Variable identifier.\n    Returns:\n        the JSON value as a Python `dict` else None.\n    \"\"\"\nreturn LAZY_AF_MODELS.Variable.get(name, default_var=None, deserialize_json=True)\n</code></pre>"},{"location":"reference/dagster/variable/#dagster.variable.list_variables","title":"<code>list_variables()</code>","text":"<p>List the variable items from Airflow <code>airflow.models.Variable</code>.</p> <p>Returns:</p> Type Description <code>Generator[None, Tuple[Text, int], None]</code> <p>A generator-type object with each Airflow Variable returned by the query.</p> Source code in <code>dagster/variable.py</code> <pre><code>def list_variables() -&gt; Generator[None, Tuple[Text, int], None]:\n\"\"\"List the variable items from Airflow `airflow.models.Variable`.\n    Returns:\n        A generator-type object with each Airflow Variable returned by the query.\n    \"\"\"\nwith LAZY_AF_UTILS.session.create_session() as session:\nqry = session.query(LAZY_AF_MODELS.Variable).all()\ndata = json.JSONDecoder()\nfor var in qry:\ntry:\nval = data.decode(var.val)\nexcept Exception:  # pylint: disable=broad-except\nval = var.val\nyield val\n</code></pre>"},{"location":"reference/dagster/variable/#dagster.variable.set_variables","title":"<code>set_variables(path_to_variables)</code>","text":"<p>Add variable items to Airflow <code>airflow.models.Variable</code>.</p> <p>Parameters:</p> Name Type Description Default <code>path_to_variables</code> <code>Text</code> <p>File path the the Airflow variable configuration.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The number of variables inserted.</p> Source code in <code>dagster/variable.py</code> <pre><code>def set_variables(path_to_variables: Text) -&gt; int:\n\"\"\"Add variable items to Airflow `airflow.models.Variable`.\n    Parameters:\n        path_to_variables: File path the the Airflow variable configuration.\n    Returns:\n        The number of variables inserted.\n    \"\"\"\nenv_map: Dict = ENV_FILE.get(RUN_CONTEXT, {})\ncounter = 0\nfor path_to_variable_template in filester.get_directory_files(\npath_to_variables, file_filter=\"*.j2\"\n):\nrendered_content = build_from_template(\nenv_map, path_to_variable_template, write_output=False\n)\ndata = json.loads(rendered_content)\nfor var_name, values in data.items():\nif get_variable(var_name):\nlogging.info(\n'Inserting variable \"%s\" skipped: already exists', var_name\n)\nelse:\nlogging.info('Inserting variable \"%s\"', var_name)\nLAZY_AF_MODELS.Variable.set(var_name, json.dumps(values, indent=4))\ncounter += 1\nreturn counter\n</code></pre>"},{"location":"reference/dagster/dags/bootstrap/","title":"bootstrap.py","text":"<p>Bootstrap takes care of Airflow instance startup dependencies.</p>"}]}